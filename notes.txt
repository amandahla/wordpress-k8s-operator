# Information now buried in Discourse threads: https://discourse.jujucharms.com/c/kubernetes


# You need Juju 2.5 and charm-tools from edge (2.5)
sudo snap refresh juju --edge --classic  # Already classic
sudo snap refresh charm --edge --classic  # Switching to classic

# Bootstrap a juju controller, or switch to one you want to use
juju bootstrap --no-gui localhost lxd \
    --config automatically-retry-hooks=false --config apt-http-proxy=http://10.0.4.1:3142/

# Install microk8s
sudo snap install microk8s --classic  --channel=edge 
sudo snap alias microk8s.kubectl kubectl  # optional, can use a different alias or none.
sudo snap alias microk8s.docker docker # again, optional

# Reset microk8s and enable required microk8s features
microk8s.reset  # clean slate
microk8s.enable dns storage registry

# Want the dashboard too? You will need it unless you can drive kubectl well.
microk8s.enable dns storage registry dashboard
kubectl get svc -n kube-system  # report the address & port
kubectl get secret -n kube-system | grep kubernetes-dashboard-token # location of token
kubectl get secret -n kube-system | grep kubernetes-dashboard-token | cut -f 1 -d ' '| xargs -n 1 kubectl describe secret -n kube-system # the token

# Attach the microk8s cluster to Juju, which will show up as a cloud per juju list-clouds
# Note that microk8s.config massages the config in a necessary way; don't get the config
# directly from kubectl or ~/.kubestuff files
microk8s.config | juju add-k8s microk8s  --cluster-name=microk8s-cluster
juju show-cloud microk8s  # should show non-loopback IP address

# Create a model on the newly created microk8s cloud. And the required storage pool with the magic name
juju add-model k8smodel microk8s
juju create-storage-pool operator-storage kubernetes storage-class=microk8s-hostpath

# Build a docker image
cd ~/src/canonical-directory # bzr branch lp:canonical-directory
make docker-build TAG=trunk REGISTRY=localhost:32000  # Using enabled microk8s' registry on localost:32000

# Build the charm
charm build -o $JUJU_REPOSITORY

# Deploy the charm
juju deploy cs:~stub/generik8s directory --channel=edge --config=directory-config.yaml  # Or local copy of the charm

# 'juju debug-log' shows the operator pod log, but doesn't show the actual unit pod logs.
# So use kubectl or the dashboard to see the unit logs.
# Need to wait on the pod to exist before it works:
kubectl get all -n k8smodel
kubectl logs pod/juju-operator-portal-caas-0 -n k8smodel  # The operator pod log
kubectl logs pod/juju-portal-caas-779b8df687-ndnw8 -n k8smodel  # A unit pod's log. No obvious mapping of unit# -> name.


# Offer the charm's PG relation
juju offer directory:postgres directory-db

# Consume the charm's PG relation
juju add-model pg
juju deploy cs:postgresql
juju consume lxd:admin/k8smodel.directory-db
juju add-relation postgresql:db directory-db

